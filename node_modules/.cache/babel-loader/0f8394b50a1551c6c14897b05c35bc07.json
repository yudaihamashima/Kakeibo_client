{"ast":null,"code":"var _jsxFileName = \"/Users/yudaihamashima/programing/Projects/3_money-management/src/components/organisms/paymentCalender.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRecoilState } from 'recoil';\nimport { paymentState, editPayment } from '../../recoil/atoms';\nimport { clickedDateState } from '../../recoil/atoms';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PaymentCalender() {\n  _s();\n\n  const [payments, setPayments] = useRecoilState(paymentState);\n  const [clickedDate, setClickedDate] = useRecoilState(clickedDateState);\n  const [paymentForEdit, setPaymentForEdit] = useRecoilState(editPayment);\n  const emptyPayment = {\n    id: null,\n    cost: 0,\n    name: '',\n    category: '',\n    payedBy: 'credit',\n    date: '',\n    point: 0,\n    onEdit: false,\n    editable: false\n  }; //when date clicked\n\n  const handleClick = event => {\n    const pickedDate = event.dateStr;\n    setClickedDate(pickedDate);\n    setPayments([...payments.map(payment => ({ ...payment,\n      onEdit: false,\n      editable: true\n    }))]);\n    setPaymentForEdit();\n  }; //when payment clicked\n\n\n  const handleEventClick = event => {\n    console.log(event);\n  }; //input calender event\n\n\n  const PaymentBars = () => {\n    const paymentBars = [];\n    payments.map(payment => paymentBars.push({\n      title: payment.cost.toString() + '円 ' + payment.name,\n      start: payment.date\n    }));\n    return paymentBars;\n  };\n\n  return /*#__PURE__*/_jsxDEV(FullCalendar, {\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin],\n    initialView: \"dayGridMonth\",\n    locale: \"ja\",\n    events: PaymentBars(),\n    dateClick: handleClick,\n    eventClick: handleEventClick,\n    headerToolbar: {\n      center: ''\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PaymentCalender, \"FA+iCGo3DNAug978VSsrGuqDQfk=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = PaymentCalender;\nexport default PaymentCalender;\n/*\n//input calender event\nconst PaymentBars = (year: number, month: number) => {\n    interface PaymentBar {\n        title: string\n        start: string\n    }\n    const paymentBars = [] as PaymentBar[] \n    const monthlyDays = (year: number, month: number) => { \n        const dayNum = (month: number) => {\n            if([1,3,5,7,8,10,12].some(monthHas31day => monthHas31day === month)) {\n                return 31\n            } else {\n                return 30\n            }\n        }\n        const days = [...Array(dayNum(month))].map((_, index: number) => {\n            if (month < 10) {\n                if (index < 9) { return year + \"-0\" + month + \"-0\" + (index+1) }\n                if (index >= 9) { return year + \"-0\" + month + \"-\" + (index+1) }\n            }\n            if (month >= 10) {\n                if (index < 9) { return year + \"-\" + month + \"-0\" + (index+1) }\n                if (index >= 9) { return year + \"-\" + month + \"-\" + (index+1) }\n            }\n        })\n        return days\n    }\n    monthlyDays(year, month).map((day) => {\n        const paymentsOfDay = payments.filter(payment => payment.date === day)\n        paymentsOfDay.map((paymentOfDay) => {\n            if(paymentOfDay !== null && paymentOfDay !== undefined) {\n                paymentBars.push({\n                    title: paymentOfDay.cost.toString()+'円 '+paymentOfDay.name,\n                    start: paymentOfDay.date\n                })\n            }\n        })\n    })\n    return paymentBars\n}\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentCalender\");","map":{"version":3,"names":["useRecoilState","paymentState","editPayment","clickedDateState","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","PaymentCalender","payments","setPayments","clickedDate","setClickedDate","paymentForEdit","setPaymentForEdit","emptyPayment","id","cost","name","category","payedBy","date","point","onEdit","editable","handleClick","event","pickedDate","dateStr","map","payment","handleEventClick","console","log","PaymentBars","paymentBars","push","title","toString","start","center"],"sources":["/Users/yudaihamashima/programing/Projects/3_money-management/src/components/organisms/paymentCalender.tsx"],"sourcesContent":["import { useRecoilState ,useRecoilValue } from 'recoil'\nimport { paymentState, editPayment } from '../../recoil/atoms'\nimport { clickedDateState } from '../../recoil/atoms'\n\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\nfunction PaymentCalender() {\n    const [ payments, setPayments ] = useRecoilState(paymentState)\n    const [ clickedDate, setClickedDate ] = useRecoilState(clickedDateState)\n    const [ paymentForEdit, setPaymentForEdit ] = useRecoilState(editPayment)\n\n    const emptyPayment = {\n        id: null,\n        cost: 0,\n        name: '',\n        category: '',\n        payedBy: 'credit',\n        date: '',\n        point: 0,\n        onEdit: false,\n        editable: false,\n    }\n\n    //when date clicked\n    const handleClick = (event: any) => {\n        const pickedDate = event.dateStr\n        setClickedDate(pickedDate)\n        setPayments([\n            ...payments.map((payment) => ({...payment, onEdit: false, editable: true}))\n        ])\n        setPaymentForEdit(\n\n        )\n    }\n\n    //when payment clicked\n    const handleEventClick = (event: any) => {\n        console.log(event)\n    }\n\n    //input calender event\n    const PaymentBars = () => {\n        interface PaymentBar {\n            title: string\n            start: string\n        }\n        const paymentBars = [] as PaymentBar[] \n        payments.map((payment) => (\n            paymentBars.push({\n                title: payment.cost.toString()+'円 '+payment.name,\n                start: payment.date\n            })\n        ))\n        return paymentBars\n    }\n\n    return(\n        <FullCalendar\n            plugins={[interactionPlugin ,dayGridPlugin, timeGridPlugin]}\n            initialView=\"dayGridMonth\"\n            locale=\"ja\" \n            events={PaymentBars()}\n            dateClick={handleClick}\n            eventClick={handleEventClick}\n            headerToolbar={{\n                center: ''\n            }}\n        />       \n    )\n\n}\n\nexport default PaymentCalender\n\n\n/*\n//input calender event\nconst PaymentBars = (year: number, month: number) => {\n    interface PaymentBar {\n        title: string\n        start: string\n    }\n    const paymentBars = [] as PaymentBar[] \n    const monthlyDays = (year: number, month: number) => { \n        const dayNum = (month: number) => {\n            if([1,3,5,7,8,10,12].some(monthHas31day => monthHas31day === month)) {\n                return 31\n            } else {\n                return 30\n            }\n        }\n        const days = [...Array(dayNum(month))].map((_, index: number) => {\n            if (month < 10) {\n                if (index < 9) { return year + \"-0\" + month + \"-0\" + (index+1) }\n                if (index >= 9) { return year + \"-0\" + month + \"-\" + (index+1) }\n            }\n            if (month >= 10) {\n                if (index < 9) { return year + \"-\" + month + \"-0\" + (index+1) }\n                if (index >= 9) { return year + \"-\" + month + \"-\" + (index+1) }\n            }\n        })\n        return days\n    }\n    monthlyDays(year, month).map((day) => {\n        const paymentsOfDay = payments.filter(payment => payment.date === day)\n        paymentsOfDay.map((paymentOfDay) => {\n            if(paymentOfDay !== null && paymentOfDay !== undefined) {\n                paymentBars.push({\n                    title: paymentOfDay.cost.toString()+'円 '+paymentOfDay.name,\n                    start: paymentOfDay.date\n                })\n            }\n        })\n    })\n    return paymentBars\n}\n*/"],"mappings":";;;AAAA,SAASA,cAAT,QAA+C,QAA/C;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,oBAA1C;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;;;AAEA,SAASC,eAAT,GAA2B;EAAA;;EACvB,MAAM,CAAEC,QAAF,EAAYC,WAAZ,IAA4BV,cAAc,CAACC,YAAD,CAAhD;EACA,MAAM,CAAEU,WAAF,EAAeC,cAAf,IAAkCZ,cAAc,CAACG,gBAAD,CAAtD;EACA,MAAM,CAAEU,cAAF,EAAkBC,iBAAlB,IAAwCd,cAAc,CAACE,WAAD,CAA5D;EAEA,MAAMa,YAAY,GAAG;IACjBC,EAAE,EAAE,IADa;IAEjBC,IAAI,EAAE,CAFW;IAGjBC,IAAI,EAAE,EAHW;IAIjBC,QAAQ,EAAE,EAJO;IAKjBC,OAAO,EAAE,QALQ;IAMjBC,IAAI,EAAE,EANW;IAOjBC,KAAK,EAAE,CAPU;IAQjBC,MAAM,EAAE,KARS;IASjBC,QAAQ,EAAE;EATO,CAArB,CALuB,CAiBvB;;EACA,MAAMC,WAAW,GAAIC,KAAD,IAAgB;IAChC,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAzB;IACAhB,cAAc,CAACe,UAAD,CAAd;IACAjB,WAAW,CAAC,CACR,GAAGD,QAAQ,CAACoB,GAAT,CAAcC,OAAD,KAAc,EAAC,GAAGA,OAAJ;MAAaP,MAAM,EAAE,KAArB;MAA4BC,QAAQ,EAAE;IAAtC,CAAd,CAAb,CADK,CAAD,CAAX;IAGAV,iBAAiB;EAGpB,CATD,CAlBuB,CA6BvB;;;EACA,MAAMiB,gBAAgB,GAAIL,KAAD,IAAgB;IACrCM,OAAO,CAACC,GAAR,CAAYP,KAAZ;EACH,CAFD,CA9BuB,CAkCvB;;;EACA,MAAMQ,WAAW,GAAG,MAAM;IAKtB,MAAMC,WAAW,GAAG,EAApB;IACA1B,QAAQ,CAACoB,GAAT,CAAcC,OAAD,IACTK,WAAW,CAACC,IAAZ,CAAiB;MACbC,KAAK,EAAEP,OAAO,CAACb,IAAR,CAAaqB,QAAb,KAAwB,IAAxB,GAA6BR,OAAO,CAACZ,IAD/B;MAEbqB,KAAK,EAAET,OAAO,CAACT;IAFF,CAAjB,CADJ;IAMA,OAAOc,WAAP;EACH,CAbD;;EAeA,oBACI,QAAC,YAAD;IACI,OAAO,EAAE,CAAC5B,iBAAD,EAAoBF,aAApB,EAAmCC,cAAnC,CADb;IAEI,WAAW,EAAC,cAFhB;IAGI,MAAM,EAAC,IAHX;IAII,MAAM,EAAE4B,WAAW,EAJvB;IAKI,SAAS,EAAET,WALf;IAMI,UAAU,EAAEM,gBANhB;IAOI,aAAa,EAAE;MACXS,MAAM,EAAE;IADG;EAPnB;IAAA;IAAA;IAAA;EAAA,QADJ;AAcH;;GAhEQhC,e;UAC6BR,c,EACMA,c,EACMA,c;;;KAHzCQ,e;AAkET,eAAeA,eAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}