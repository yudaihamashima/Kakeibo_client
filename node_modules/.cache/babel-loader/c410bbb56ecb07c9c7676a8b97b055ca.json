{"ast":null,"code":"var _jsxFileName = \"/Users/yudaihamashima/programing/Projects/3_money-management/src/components/organisms/calender/paymentCalender.tsx\",\n    _s = $RefreshSig$();\n\nimport { useRecoilState } from 'recoil';\nimport { paymentState, editPaymentState, newPaymentState } from '../../../recoil/atoms';\nimport { clickedDateState } from '../../../recoil/atoms';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst emptyPayment = {\n  id: null,\n  cost: 0,\n  name: '',\n  category: '',\n  payedBy: 'credit',\n  date: '',\n  point: 0,\n  onEdit: false,\n  editable: false\n};\n\nfunction PaymentCalender() {\n  _s();\n\n  const [payments, setPayments] = useRecoilState(paymentState);\n  const [clickedDate, setClickedDate] = useRecoilState(clickedDateState);\n  const [editPayment, setEditPayment] = useRecoilState(editPaymentState);\n  const [newPayment, setNewPayment] = useRecoilState(newPaymentState); //when date clicked\n\n  const handleDateClick = event => {\n    const pickedDate = event.dateStr;\n    setClickedDate(pickedDate);\n    setPayments([...payments.map(payment => ({ ...payment,\n      onEdit: false,\n      editable: true\n    }))]);\n    setEditPayment(emptyPayment);\n    setNewPayment({ ...newPayment,\n      date: pickedDate\n    });\n  }; //when payment clicked\n\n\n  const handleEventClick = event => {\n    console.log(event);\n  }; //input calender event\n\n\n  const PaymentBars = () => {\n    const paymentBars = [];\n    payments.map(payment => paymentBars.push({\n      title: payment.cost.toString() + '円 ' + payment.name,\n      start: payment.date\n    }));\n    return paymentBars;\n  };\n\n  return /*#__PURE__*/_jsxDEV(FullCalendar, {\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin],\n    initialView: \"dayGridMonth\",\n    locale: \"ja\",\n    events: PaymentBars(),\n    dateClick: handleDateClick,\n    eventClick: handleEventClick,\n    headerToolbar: {\n      center: ''\n    },\n    selectable: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PaymentCalender, \"sSBnLe/MRxnjM0hDNmQWZcdtE/c=\", false, function () {\n  return [useRecoilState, useRecoilState, useRecoilState, useRecoilState];\n});\n\n_c = PaymentCalender;\nexport default PaymentCalender;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaymentCalender\");","map":{"version":3,"names":["useRecoilState","paymentState","editPaymentState","newPaymentState","clickedDateState","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","emptyPayment","id","cost","name","category","payedBy","date","point","onEdit","editable","PaymentCalender","payments","setPayments","clickedDate","setClickedDate","editPayment","setEditPayment","newPayment","setNewPayment","handleDateClick","event","pickedDate","dateStr","map","payment","handleEventClick","console","log","PaymentBars","paymentBars","push","title","toString","start","center"],"sources":["/Users/yudaihamashima/programing/Projects/3_money-management/src/components/organisms/calender/paymentCalender.tsx"],"sourcesContent":["import { useRecoilState } from 'recoil'\nimport { paymentState, editPaymentState, newPaymentState } from '../../../recoil/atoms'\nimport { clickedDateState } from '../../../recoil/atoms'\n\nimport FullCalendar from '@fullcalendar/react'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\nconst emptyPayment = {\n    id: null,\n    cost: 0,\n    name: '',\n    category: '',\n    payedBy: 'credit',\n    date: '',\n    point: 0,\n    onEdit: false,\n    editable: false,\n}\n\nfunction PaymentCalender() {\n    const [ payments, setPayments ] = useRecoilState(paymentState)\n    const [ clickedDate, setClickedDate ] = useRecoilState(clickedDateState)\n    const [ editPayment, setEditPayment ] = useRecoilState(editPaymentState)\n    const [ newPayment, setNewPayment] = useRecoilState(newPaymentState)\n\n    //when date clicked\n    const handleDateClick = (event: any) => {\n        const pickedDate = event.dateStr\n        setClickedDate(pickedDate)\n        setPayments([\n            ...payments.map((payment) => ({...payment, onEdit: false, editable: true}))\n        ])\n        setEditPayment(emptyPayment)\n        setNewPayment({...newPayment, date: pickedDate})\n    }\n\n    //when payment clicked\n    const handleEventClick = (event: any) => {\n        console.log(event)\n    }\n\n    //input calender event\n    const PaymentBars = () => {\n        interface PaymentBar {\n            title: string\n            start: string\n        }\n        const paymentBars = [] as PaymentBar[] \n        payments.map((payment) => (\n            paymentBars.push({\n                title: payment.cost.toString()+'円 '+payment.name,\n                start: payment.date\n            })\n        ))\n        return paymentBars\n    }\n\n    return(\n        <FullCalendar\n            plugins={[interactionPlugin ,dayGridPlugin, timeGridPlugin]}\n            initialView=\"dayGridMonth\"\n            locale=\"ja\" \n            events={PaymentBars()}\n            dateClick={handleDateClick}\n            eventClick={handleEventClick}\n            headerToolbar={{\n                center: ''\n            }}\n            selectable={true}\n        />       \n    )\n\n}\n\nexport default PaymentCalender"],"mappings":";;;AAAA,SAASA,cAAT,QAA+B,QAA/B;AACA,SAASC,YAAT,EAAuBC,gBAAvB,EAAyCC,eAAzC,QAAgE,uBAAhE;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AAEA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;;AAEA,MAAMC,YAAY,GAAG;EACjBC,EAAE,EAAE,IADa;EAEjBC,IAAI,EAAE,CAFW;EAGjBC,IAAI,EAAE,EAHW;EAIjBC,QAAQ,EAAE,EAJO;EAKjBC,OAAO,EAAE,QALQ;EAMjBC,IAAI,EAAE,EANW;EAOjBC,KAAK,EAAE,CAPU;EAQjBC,MAAM,EAAE,KARS;EASjBC,QAAQ,EAAE;AATO,CAArB;;AAYA,SAASC,eAAT,GAA2B;EAAA;;EACvB,MAAM,CAAEC,QAAF,EAAYC,WAAZ,IAA4BrB,cAAc,CAACC,YAAD,CAAhD;EACA,MAAM,CAAEqB,WAAF,EAAeC,cAAf,IAAkCvB,cAAc,CAACI,gBAAD,CAAtD;EACA,MAAM,CAAEoB,WAAF,EAAeC,cAAf,IAAkCzB,cAAc,CAACE,gBAAD,CAAtD;EACA,MAAM,CAAEwB,UAAF,EAAcC,aAAd,IAA+B3B,cAAc,CAACG,eAAD,CAAnD,CAJuB,CAMvB;;EACA,MAAMyB,eAAe,GAAIC,KAAD,IAAgB;IACpC,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAzB;IACAR,cAAc,CAACO,UAAD,CAAd;IACAT,WAAW,CAAC,CACR,GAAGD,QAAQ,CAACY,GAAT,CAAcC,OAAD,KAAc,EAAC,GAAGA,OAAJ;MAAahB,MAAM,EAAE,KAArB;MAA4BC,QAAQ,EAAE;IAAtC,CAAd,CAAb,CADK,CAAD,CAAX;IAGAO,cAAc,CAAChB,YAAD,CAAd;IACAkB,aAAa,CAAC,EAAC,GAAGD,UAAJ;MAAgBX,IAAI,EAAEe;IAAtB,CAAD,CAAb;EACH,CARD,CAPuB,CAiBvB;;;EACA,MAAMI,gBAAgB,GAAIL,KAAD,IAAgB;IACrCM,OAAO,CAACC,GAAR,CAAYP,KAAZ;EACH,CAFD,CAlBuB,CAsBvB;;;EACA,MAAMQ,WAAW,GAAG,MAAM;IAKtB,MAAMC,WAAW,GAAG,EAApB;IACAlB,QAAQ,CAACY,GAAT,CAAcC,OAAD,IACTK,WAAW,CAACC,IAAZ,CAAiB;MACbC,KAAK,EAAEP,OAAO,CAACtB,IAAR,CAAa8B,QAAb,KAAwB,IAAxB,GAA6BR,OAAO,CAACrB,IAD/B;MAEb8B,KAAK,EAAET,OAAO,CAAClB;IAFF,CAAjB,CADJ;IAMA,OAAOuB,WAAP;EACH,CAbD;;EAeA,oBACI,QAAC,YAAD;IACI,OAAO,EAAE,CAAC9B,iBAAD,EAAoBF,aAApB,EAAmCC,cAAnC,CADb;IAEI,WAAW,EAAC,cAFhB;IAGI,MAAM,EAAC,IAHX;IAII,MAAM,EAAE8B,WAAW,EAJvB;IAKI,SAAS,EAAET,eALf;IAMI,UAAU,EAAEM,gBANhB;IAOI,aAAa,EAAE;MACXS,MAAM,EAAE;IADG,CAPnB;IAUI,UAAU,EAAE;EAVhB;IAAA;IAAA;IAAA;EAAA,QADJ;AAeH;;GArDQxB,e;UAC6BnB,c,EACMA,c,EACAA,c,EACHA,c;;;KAJhCmB,e;AAuDT,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}