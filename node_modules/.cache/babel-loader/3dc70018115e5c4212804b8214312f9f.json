{"ast":null,"code":"export function getDtateStringJP(dateString) {\n  var date = new Date(dateString);\n  var year = date.getFullYear().toString();\n  var month = (date.getMonth() + 1).toString();\n  var day = date.getDate().toString();\n  return year + '年' + month + '月' + day + '日';\n}\n/*\nconst PaymentBars = (year: number, month: number) => {\n    interface PaymentBar {\n        title: string\n        start: string\n    }\n    const paymentBars = [] as PaymentBar[] \n    const monthlyDays = (year: number, month: number) => { \n        const dayNum = (month: number) => {\n            if([1,3,5,7,8,10,12].some(monthHas31day => monthHas31day === month)) {\n                return 31\n            } else {\n                return 30\n            }\n        }\n        const days = [...Array(dayNum(month))].map((_, index: number) => {\n            if (month < 10) {\n                if (index < 9) { return year + \"-0\" + month + \"-0\" + (index+1) }\n                if (index >= 9) { return year + \"-0\" + month + \"-\" + (index+1) }\n            }\n            if (month >= 10) {\n                if (index < 9) { return year + \"-\" + month + \"-0\" + (index+1) }\n                if (index >= 9) { return year + \"-\" + month + \"-\" + (index+1) }\n            }\n        })\n        return days\n    }\n    monthlyDays(year,month).map((day) => {\n        const paymentsOfDay = payments.filter(payment => payment.date === day)\n        paymentsOfDay.map((paymentOfDay) => {\n            if(paymentOfDay !== null && paymentOfDay !== undefined) {\n                paymentBars.push({\n                    title: paymentOfDay.cost.toString()+'円',\n                    start: paymentOfDay.date\n                })\n            }\n        })\n    })\n    return paymentBars\n}\n*/","map":{"version":3,"names":["getDtateStringJP","dateString","date","Date","year","getFullYear","toString","month","getMonth","day","getDate"],"sources":["/Users/yudaihamashima/programing/Projects/3_money-management/src/util/dateType.tsx"],"sourcesContent":["export function getDtateStringJP (dateString: string) {\n    var date = new Date(dateString)\n    var year = date.getFullYear().toString()\n    var month = (date.getMonth()+1).toString()\n    var day = date.getDate().toString()\n\n    return year + '年' + month + '月' + day + '日'\n}\n\n\n/*\nconst PaymentBars = (year: number, month: number) => {\n    interface PaymentBar {\n        title: string\n        start: string\n    }\n    const paymentBars = [] as PaymentBar[] \n    const monthlyDays = (year: number, month: number) => { \n        const dayNum = (month: number) => {\n            if([1,3,5,7,8,10,12].some(monthHas31day => monthHas31day === month)) {\n                return 31\n            } else {\n                return 30\n            }\n        }\n        const days = [...Array(dayNum(month))].map((_, index: number) => {\n            if (month < 10) {\n                if (index < 9) { return year + \"-0\" + month + \"-0\" + (index+1) }\n                if (index >= 9) { return year + \"-0\" + month + \"-\" + (index+1) }\n            }\n            if (month >= 10) {\n                if (index < 9) { return year + \"-\" + month + \"-0\" + (index+1) }\n                if (index >= 9) { return year + \"-\" + month + \"-\" + (index+1) }\n            }\n        })\n        return days\n    }\n    monthlyDays(year,month).map((day) => {\n        const paymentsOfDay = payments.filter(payment => payment.date === day)\n        paymentsOfDay.map((paymentOfDay) => {\n            if(paymentOfDay !== null && paymentOfDay !== undefined) {\n                paymentBars.push({\n                    title: paymentOfDay.cost.toString()+'円',\n                    start: paymentOfDay.date\n                })\n            }\n        })\n    })\n    return paymentBars\n}\n*/"],"mappings":"AAAA,OAAO,SAASA,gBAAT,CAA2BC,UAA3B,EAA+C;EAClD,IAAIC,IAAI,GAAG,IAAIC,IAAJ,CAASF,UAAT,CAAX;EACA,IAAIG,IAAI,GAAGF,IAAI,CAACG,WAAL,GAAmBC,QAAnB,EAAX;EACA,IAAIC,KAAK,GAAG,CAACL,IAAI,CAACM,QAAL,KAAgB,CAAjB,EAAoBF,QAApB,EAAZ;EACA,IAAIG,GAAG,GAAGP,IAAI,CAACQ,OAAL,GAAeJ,QAAf,EAAV;EAEA,OAAOF,IAAI,GAAG,GAAP,GAAaG,KAAb,GAAqB,GAArB,GAA2BE,GAA3B,GAAiC,GAAxC;AACH;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}