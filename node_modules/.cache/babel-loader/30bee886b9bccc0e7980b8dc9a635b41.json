{"ast":null,"code":"var _jsxFileName = \"/Users/yudaihamashima/programing/Projects/3_money-management/src/components/atoms/crudUnit/choosePayedByButton.tsx\",\n    _s = $RefreshSig$();\n\n//chooseFromTwoValue.tsx\nimport { Button, ButtonGroup } from \"@mui/material\"; //２択ボタンのアイコンをインストール\n\nimport CreditCardIcon from '@mui/icons-material/CreditCard';\nimport MonetizationOnIcon from '@mui/icons-material/MonetizationOn'; //変更するコンポーネント配列をインポート\n\nimport { useRecoilState } from 'recoil';\nimport { newPaymentState } from '../../../recoil/atoms';\nimport { editPaymentState } from '../../../recoil/atoms'; //ボタンの選択・未選択時のデザイン\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst choosedStyle = {\n  color: \"#474747\",\n  background: \"#fffa0f\"\n};\nconst notChoosedStyle = {\n  color: \"#d6d6d6\",\n  background: \"#e8e8e8\"\n};\n\nfunction ChoosePayedByButton(props) {\n  _s();\n\n  const payment = props.payment; //変更するコンポーネント配列の全体を読み込む\n\n  const [newPayment, setNewPayment] = useRecoilState(newPaymentState);\n  const [editPayment, setEditPayment] = useRecoilState(editPaymentState);\n\n  if (payment.id !== null) {\n    const paymentForDisplay = editPayment;\n  } else {\n    const paymentForDisplay = newPayment;\n  } //両方のボタンに値の変更関数を設定\n\n\n  const handleClickCredit = payment => {\n    if (payment.id !== null) {\n      setEditPayment({ ...editPayment,\n        payedBy: 'credit'\n      });\n    } else {\n      console.log('id=null');\n      setNewPayment({ ...newPayment,\n        payedBy: 'credit'\n      });\n    }\n  };\n\n  const handleClickCash = payment => {\n    if (payment.id !== null) {\n      setEditPayment({ ...editPayment,\n        payedBy: 'cash'\n      });\n    } else {\n      console.log('id=null');\n      setNewPayment({ ...newPayment,\n        payedBy: 'cash'\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ButtonGroup, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      sx: props.payment.payedBy === 'credit' ? choosedStyle : notChoosedStyle,\n      onClick: () => handleClickCredit(payment),\n      children: /*#__PURE__*/_jsxDEV(CreditCardIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      sx: props.payment.payedBy === 'cash' ? choosedStyle : notChoosedStyle,\n      onClick: () => handleClickCash(payment),\n      children: /*#__PURE__*/_jsxDEV(MonetizationOnIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChoosePayedByButton, \"eaAvQx8hJ7hhsCN8Xgy1T68uJbI=\", false, function () {\n  return [useRecoilState, useRecoilState];\n});\n\n_c = ChoosePayedByButton;\nexport default ChoosePayedByButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChoosePayedByButton\");","map":{"version":3,"names":["Button","ButtonGroup","CreditCardIcon","MonetizationOnIcon","useRecoilState","newPaymentState","editPaymentState","choosedStyle","color","background","notChoosedStyle","ChoosePayedByButton","props","payment","newPayment","setNewPayment","editPayment","setEditPayment","id","paymentForDisplay","handleClickCredit","payedBy","console","log","handleClickCash"],"sources":["/Users/yudaihamashima/programing/Projects/3_money-management/src/components/atoms/crudUnit/choosePayedByButton.tsx"],"sourcesContent":["//chooseFromTwoValue.tsx\n\nimport { Button, ButtonGroup } from \"@mui/material\"\n\n//２択ボタンのアイコンをインストール\nimport CreditCardIcon from '@mui/icons-material/CreditCard'\nimport MonetizationOnIcon from '@mui/icons-material/MonetizationOn'\n\n//変更するコンポーネント配列をインポート\nimport { useRecoilState } from 'recoil'\nimport { newPaymentState } from '../../../recoil/atoms'\nimport { editPaymentState } from '../../../recoil/atoms'\n\n//ボタンの選択・未選択時のデザイン\nconst choosedStyle = {\n    color: \"#474747\", \n    background: \"#fffa0f\",\n}\nconst notChoosedStyle = {\n    color: \"#d6d6d6\",\n    background: \"#e8e8e8\",\n}\n\nfunction ChoosePayedByButton(props: any) {\n    const payment = props.payment\n\n    //変更するコンポーネント配列の全体を読み込む\n    const [newPayment, setNewPayment] = useRecoilState(newPaymentState)\n    const [editPayment, setEditPayment] = useRecoilState(editPaymentState)\n\n    if (payment.id !== null) {\n        const paymentForDisplay = editPayment\n    } else {\n        const paymentForDisplay = newPayment\n    }\n\n    //両方のボタンに値の変更関数を設定\n    const handleClickCredit = (payment: any) => {\n        if(payment.id !== null){\n            setEditPayment({ ...editPayment, payedBy: 'credit' })\n        } else {\n            console.log('id=null')\n            setNewPayment({ ...newPayment, payedBy: 'credit' })\n        }\n    }\n    const handleClickCash = (payment: any) => {\n        if(payment.id !== null){\n            setEditPayment({ ...editPayment, payedBy: 'cash' })\n        } else {\n            console.log('id=null')\n            setNewPayment({ ...newPayment, payedBy: 'cash' })\n        }\n    }\n\n    return(\n        <ButtonGroup>\n            <Button \n                sx={ props.payment.payedBy === 'credit' ? choosedStyle : notChoosedStyle }\n                onClick={()=>handleClickCredit(payment)}\n            >\n                <CreditCardIcon />\n            </Button>\n            <Button\n                sx={ props.payment.payedBy === 'cash' ? choosedStyle : notChoosedStyle }\n                onClick={()=>handleClickCash(payment)}\n            >\n                <MonetizationOnIcon />\n            </Button>\n        </ButtonGroup>   \n    )\n}\n\nexport default ChoosePayedByButton"],"mappings":";;;AAAA;AAEA,SAASA,MAAT,EAAiBC,WAAjB,QAAoC,eAApC,C,CAEA;;AACA,OAAOC,cAAP,MAA2B,gCAA3B;AACA,OAAOC,kBAAP,MAA+B,oCAA/B,C,CAEA;;AACA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,gBAAT,QAAiC,uBAAjC,C,CAEA;;;AACA,MAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,SADU;EAEjBC,UAAU,EAAE;AAFK,CAArB;AAIA,MAAMC,eAAe,GAAG;EACpBF,KAAK,EAAE,SADa;EAEpBC,UAAU,EAAE;AAFQ,CAAxB;;AAKA,SAASE,mBAAT,CAA6BC,KAA7B,EAAyC;EAAA;;EACrC,MAAMC,OAAO,GAAGD,KAAK,CAACC,OAAtB,CADqC,CAGrC;;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,cAAc,CAACC,eAAD,CAAlD;EACA,MAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCb,cAAc,CAACE,gBAAD,CAApD;;EAEA,IAAIO,OAAO,CAACK,EAAR,KAAe,IAAnB,EAAyB;IACrB,MAAMC,iBAAiB,GAAGH,WAA1B;EACH,CAFD,MAEO;IACH,MAAMG,iBAAiB,GAAGL,UAA1B;EACH,CAXoC,CAarC;;;EACA,MAAMM,iBAAiB,GAAIP,OAAD,IAAkB;IACxC,IAAGA,OAAO,CAACK,EAAR,KAAe,IAAlB,EAAuB;MACnBD,cAAc,CAAC,EAAE,GAAGD,WAAL;QAAkBK,OAAO,EAAE;MAA3B,CAAD,CAAd;IACH,CAFD,MAEO;MACHC,OAAO,CAACC,GAAR,CAAY,SAAZ;MACAR,aAAa,CAAC,EAAE,GAAGD,UAAL;QAAiBO,OAAO,EAAE;MAA1B,CAAD,CAAb;IACH;EACJ,CAPD;;EAQA,MAAMG,eAAe,GAAIX,OAAD,IAAkB;IACtC,IAAGA,OAAO,CAACK,EAAR,KAAe,IAAlB,EAAuB;MACnBD,cAAc,CAAC,EAAE,GAAGD,WAAL;QAAkBK,OAAO,EAAE;MAA3B,CAAD,CAAd;IACH,CAFD,MAEO;MACHC,OAAO,CAACC,GAAR,CAAY,SAAZ;MACAR,aAAa,CAAC,EAAE,GAAGD,UAAL;QAAiBO,OAAO,EAAE;MAA1B,CAAD,CAAb;IACH;EACJ,CAPD;;EASA,oBACI,QAAC,WAAD;IAAA,wBACI,QAAC,MAAD;MACI,EAAE,EAAGT,KAAK,CAACC,OAAN,CAAcQ,OAAd,KAA0B,QAA1B,GAAqCd,YAArC,GAAoDG,eAD7D;MAEI,OAAO,EAAE,MAAIU,iBAAiB,CAACP,OAAD,CAFlC;MAAA,uBAII,QAAC,cAAD;QAAA;QAAA;QAAA;MAAA;IAJJ;MAAA;MAAA;MAAA;IAAA,QADJ,eAOI,QAAC,MAAD;MACI,EAAE,EAAGD,KAAK,CAACC,OAAN,CAAcQ,OAAd,KAA0B,MAA1B,GAAmCd,YAAnC,GAAkDG,eAD3D;MAEI,OAAO,EAAE,MAAIc,eAAe,CAACX,OAAD,CAFhC;MAAA,uBAII,QAAC,kBAAD;QAAA;QAAA;QAAA;MAAA;IAJJ;MAAA;MAAA;MAAA;IAAA,QAPJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAgBH;;GA/CQF,mB;UAI+BP,c,EACEA,c;;;KALjCO,mB;AAiDT,eAAeA,mBAAf"},"metadata":{},"sourceType":"module"}